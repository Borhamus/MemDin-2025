classDiagram
    %% =========================
    %% CLASES PRINCIPALES - ACTUALIZADAS
    %% =========================

    class Configuracion {
      +int tamanoMemoria
      +string estrategia
      +int tiempoSeleccion
      +int tiempoCarga
      +int tiempoLiberacion
      +Array tanda
      +setTamanoMemoria(tamano)
      +setEstrategia(estrategia)
      +setTiempos(sel, carga, lib)
      +setTanda(tanda)
      +getTamanoMemoria()
      +getEstrategia()
      +getTiempoSeleccion()
      +getTiempoCarga()
      +getTiempoLiberacion()
      +getTanda()
    }

    class Estrategias {
      <<static>>
      +firstFit(memoria, tamanoRequerido) BloqueMemoria
      +bestFit(memoria, tamanoRequerido) BloqueMemoria
      +worstFit(memoria, tamanoRequerido) BloqueMemoria
      +nextFit(memoria, tamanoRequerido) BloqueMemoria
    }

    class Memoria {
      +int tamanoTotal
      +List~BloqueMemoria~ bloques
      +int ultimoIndiceAsignado
      +asignarMemoria(proceso, estrategia) BloqueMemoria
      +liberarMemoria(proceso)
      +unificarBloques()
      +firstFit(tamanoRequerido) BloqueMemoria
      +bestFit(tamanoRequerido) BloqueMemoria
      +worstFit(tamanoRequerido) BloqueMemoria
      +nextFit(tamanoRequerido) BloqueMemoria
      +getEstado() Array
    }

    class BloqueMemoria {
      +int inicio
      +int tamano
      +bool libre
      +Proceso proceso
      +puedeUnir(otroBloque) bool
      +unir(otroBloque) bool
      +dividir(tamanoOcupado) BloqueMemoria
    }

    class ListaDeProcesos {
      +List~Proceso~ procesos
      +cargarProcesos(datos)
      +ordenarPorLlegada()
      +obtenerSiguienteProceso(tiempoGlobal) Proceso
      +obtenerProcesosEnEspera(tiempoGlobal) Array
      +obtenerProcesosPorEstado(estado) Array
      +hayProcesosEnEstado(estado) bool
      +hayProcesosEnEspera(tiempoGlobal) bool
      +hayProcesosActivos() bool
      +getTodos() Array
    }

    class Proceso {
      +string id
      +int arrivaltime
      +int duracionOriginal
      +int duracion
      +int memReq
      +string estado
      +int tiempoSeleccionRestante
      +int tiempoCargaRestante
      +int tiempoLiberacionRestante
      +int tiempoInicio
      +int tiempoFinMemoria
      +int tiempoFin
      +BloqueMemoria bloqueAsignado
      +iniciarSeleccion(tiempo, tiempoActual) bool
      +iniciarCarga(tiempo, tiempoActual) bool
      +iniciarMemoria(tiempoActual) bool
      +iniciarLiberacion(tiempo, tiempoActual) bool
      +finalizar(tiempoActual)
      +decrementarTiempo() bool
    }

    class Simulador {
      <<Singleton>>
      +Configuracion configuracion
      +Memoria memoria
      +ListaDeProcesos listaProcesos
      +Registros registros
      +int tiempoGlobal
      +bool estaEjecutando
      +Array snapshots
      +int maxTiempoGlobal
      +int tiempoDeRetornoDeLaTanda
      +int espacioLibreXtiempo
      +inicializar(configuracion)
      +ejecutar()
      +paso()
      +debeCalcularEspacioLibre() bool
      +calcularEspacioLibre()
      +procesarLiberacion()
      +procesarMemoria()
      +procesarCarga()
      +procesarSeleccion()
      +asignarNuevosProcesos()
      +hayProcesosActivos() bool
      +tomarSnapshot()
      +getSnapshots() Array
      +getEstadoActual() Object
      +reiniciar()
      +getRegistros() Registros
      +getListaProcesos() ListaDeProcesos
      +getMemoria() Memoria
      +getTiempoDeRetornoDeLaTanda() int
      +getEspacioLibreXtiempo() int
    }

    class Evento {
      +int tiempo
      +string tipo
      +Object detalles
    }

    class Registros {
      +List~Evento~ eventos
      +registrarEvento(tiempo, tipo, detalles)
      +getEventos() Array
      +getEventosEnRango(inicio, fin) Array
      +limpiar()
    }

    class Reporte {
      +Registros registros
      +ListaDeProcesos listaProcesos
      +Memoria memoria
      +Simulador simulador
      +generarReporte() string
      +getIndicadores() Object
    }

    class VisualizadorMemoria {
      +string contenedorId
      +Canvas canvas
      +Context2D ctx
      +Simulador simulador
      +Array snapshots
      +Object config
      +inicializar(simulador) bool
      +crearCanvas()
      +obtenerTamanoMemoria() int
      +crearPatron(tipo, color) CanvasPattern
      +dibujar()
      +dibujarEjes()
      +dibujarBloques()
      +dibujarLeyenda()
      +onMouseMove(event)
      +onClick(event)
      +obtenerInfoEnPosicion(x, y) string
      +mostrarError(mensaje)
      +destruir()
    }

    class MainController {
      <<UI Controller>>
      +HTMLElement archivoTandaSelect
      +HTMLElement tamMemoriaInput
      +HTMLElement estrategiaSelect
      +HTMLElement botones...
      +Simulador simulador
      +VisualizadorMemoria visualizadorMemoria
      +int snapshotActual
      +Array tandasDisponibles
      +cargarTandas()
      +cargarTanda(archivo) Promise
      +ejecutarSimulacion() Promise
      +mostrarIndicadores()
      +mostrarSnapshot(indice)
      +actualizarNavegacion()
      +generarVisualizacionMemoria()
      +descargarReporte() Promise
      +obtenerSiguienteNumeroSimulacion() Promise
    }

    %% =========================
    %% RELACIONES ACTUALIZADAS
    %% =========================

    Simulador --> Configuracion : usa
    Simulador --> Memoria : administra
    Simulador --> ListaDeProcesos : administra
    Simulador --> Registros : usa
    
    Estrategias ..> Memoria : consulta
    Memoria "1" *-- "many" BloqueMemoria : contiene
    BloqueMemoria --> Proceso : referencia
    ListaDeProcesos "1" *-- "many" Proceso : contiene
    
    Registros "1" *-- "many" Evento : contiene
    
    Reporte --> Simulador : analiza
    Reporte --> Registros : usa
    Reporte --> ListaDeProcesos : usa
    Reporte --> Memoria : usa
    
    VisualizadorMemoria --> Simulador : visualiza
    
    MainController --> Simulador : controla
    MainController --> VisualizadorMemoria : crea
    MainController --> Configuracion : crea
    MainController --> Reporte : usa
    
    %% =========================
    %% NOTAS SOBRE CAMBIOS
    %% =========================
    
    note for Simulador "Patrón Singleton implementado\nManeja variables globales para métricas\nProcesa estados en orden específico"
    note for Proceso "Estados: EnEspera, EnSeleccion, EnCarga, EnMemoria, EnLiberacion, Finalizado\nTimers individuales para cada transición"
    note for VisualizadorMemoria "Genera canvas con gráfico Gantt de memoria\nPatrones visuales para diferentes estados\nInteractividad con mouse"
    note for MainController "Archivo main.js\nControla toda la interfaz HTML\nManeja navegación temporal por snapshots"